
/**
 * <b>Quizz.java Elle comprend l'interface graphique qui affiche les questions et leurs réponses, gere le déroulement du qcm et la mise a jour du score pour le joueur</b>
 * <p>
 * La classe contient les informations suivantes
 * <ul>
 * <li>listQcm</li><li>States</li><li>nbQuestion</li><li>score</li><li>jButton1</li><li>jLabel1</li><li>jLabel2</li><li>jLabel3</li><li>jRadioButton1</li><li>jRadioButton2</li>
 * </ul>
 * </p>
 * 
 * Created on 18 mars 2012, 15:10:12
 * @author alexandre
 */

package xmlEditor;

import java.util.List;

public class Quizz extends javax.swing.JFrame {
		// Variables declaration - do not modify 
		/**
		 * 4 etats du systeme : Debut, Question, Reponse, Fin
		 */
        private enum States{
        D,Q,R,F};
        /**
         * Numero de la question en cours
         */
        int nbQuestion=0;
        /**
         * Score final du joueur
         */
        int score;
        /**
         * Liste des Questions
         */
        public List<Qcm> listQcm ;
        /**
         * Bouton général de l'application (Commencer, Valider)
         */
        private javax.swing.JButton jButton1;
        /**
         * Texte de la question
         */
        private javax.swing.JLabel jLabel1;
        /**
         * Reponse de la question
         */
        private javax.swing.JLabel jLabel2;
        /**
         * numero de la question posée
         **/
        private javax.swing.JLabel jLabel3;
        /**
         * 1ere réponse proposée
         */
        private javax.swing.JRadioButton jRadioButton1;
        /**
         * 2eme réponse proposée
         */
        private javax.swing.JRadioButton jRadioButton2;
        // End of variables declaration  

    private States etat;

    /**
     *  Creation new Quizz, qui prend en parametre la liste des questions génerés avec le fichier XML
     *  @param l
     */
    public Quizz(List<Qcm> l) {
        listQcm=l;
        initComponents();
        init();
    }

    /**
     *  Initialisation des composant JavaSwing
     */
    public void init(){
        etat=States.D;
        jButton1.setText("Commencer !");
        jLabel1.setText("");
        jLabel2.setText("");
        jLabel3.setText("");
        jRadioButton1.setVisible(false);
        jRadioButton2.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        jButton1.setText("Valider");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("jRadioButton1");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("jRadioButton2");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * Traitment du bouton en fonction des 4 etats.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
                switch (etat) {
            case D:
                etat = States.Q;
                jRadioButton1.setVisible(true);
                jRadioButton2.setVisible(true);
                jButton1.setText("Valider");
                jLabel1.setText(listQcm.get(nbQuestion).getQuestiontextFormat());
                jLabel2.setText("");// Pas de reponse
                jRadioButton1.setText(listQcm.get(nbQuestion).getAnswer().get(0).getText());
                jRadioButton2.setText(listQcm.get(nbQuestion).getAnswer().get(1).getText());

                // incrementation et affichage
                nbQuestion++;
                 jLabel3.setText("Question n° "+nbQuestion);
                // mise a jour du score
                if (jRadioButton1.isSelected())
                    score = score + Integer.parseInt(listQcm.get(nbQuestion).getAnswer().get(0).getAnswerFraction());
                if (jRadioButton1.isSelected())
                    score = score + Integer.parseInt(listQcm.get(nbQuestion).getAnswer().get(1).getAnswerFraction());

                break;

            case Q:
                etat = States.R;
                jLabel2.setText(listQcm.get(nbQuestion).getAnswer().get(0).getFeedback()); // On affiche la reponse
                jButton1.setText("Question Suivante");
                break;
            case R:
                if (nbQuestion+1 >= listQcm.size())
                {
                    etat = States.F;
                }
                else
                {
                etat = States.Q;
                jButton1.setText("Valider");
                jLabel1.setText(listQcm.get(nbQuestion).getQuestiontextFormat());
                jLabel2.setText("");// Pas de reponse
                jRadioButton1.setText(listQcm.get(nbQuestion).getAnswer().get(0).getText());
                jRadioButton2.setText(listQcm.get(nbQuestion).getAnswer().get(1).getText());

                // incrementation et affichage
                nbQuestion++;
                jLabel3.setText("Question n° "+nbQuestion);
                // mise a jour du score
                if (jRadioButton1.isSelected())
                    score = score + Integer.parseInt(listQcm.get(nbQuestion).getAnswer().get(0).getAnswerFraction());
                if (jRadioButton1.isSelected())
                    score = score + Integer.parseInt(listQcm.get(nbQuestion).getAnswer().get(1).getAnswerFraction());
                }
                break;

            case F:
                jRadioButton1.setVisible(false);
                jRadioButton2.setVisible(false);
                jButton1.setVisible(false);
                jLabel2.setText("Score : "+ score);
                jLabel1.setText("Le Questionnaire est treminé.");
                jLabel3.setText("");
                break;
        }
    }                                        

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    /**
    * @param args the command line arguments
    * Methode Main qui passe en paramatre de l'interface la liste des questions génerés avec le fichier XML
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            ParseXMLFile parce = new ParseXMLFile();
            parce.parse();

            // test avec des questions crée (sans xml)
            /*
            List<Answer> listAnswer = null;
            Answer a1 = new Answer("true","Tomcat est un conteneur Web uniquement","0");
            Answer a2 = new Answer("false","Tomcat est un conteneur Web uniquement","100");
            listAnswer.add(a1);
            listAnswer.add(a2);

            Qcm q1 = new Qcm("truefalse", "Tomcat et JEE", "Tomcat est un conteneur implementanttoutes les specifications JEE","moodle_format","","","1","1","0","0", listAnswer);
            Qcm q2 = new Qcm("truefalse", "Tomcat et JEE", "Tomcat est un cimp question2","moodle_format","","","1","1","0","0", listAnswer);

            parce.listQcm.add(q1);
            parce.listQcm.add(q1);*/
            
            /*System.out.println(parce.listQcm.get(0).getQuestiontextFormat());
            System.out.println("#################");

            for (int i = 0; i < 1; i++) {
            	System.out.println(parce.listQcm.get(i).getAnswer().get(0).getText());
            	System.out.println(parce.listQcm.get(i).getAnswer().get(0).getAnswerFraction());
            }*/
            //test

            
            Quizz q = new Quizz(parce.listQcm);
            q.setVisible(true);


            }
        });
    }              

}
